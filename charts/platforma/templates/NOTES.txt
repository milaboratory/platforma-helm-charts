{{- /*
This file is displayed by Helm after a successful installation.
It provides instructions on how to access the application.
*/ -}}
Platforma has been successfully deployed.

To access your application, follow the instructions below based on your service type:

{{- if .Values.ingress.enabled }}
1. **Get the Ingress Host:**
   Run the following command to find the host name:
   ```sh
   export APP_HOST=$(kubectl get ingress {{ include "platforma.fullname" . }} -o jsonpath='{.spec.rules[0].host}')
   ```

2. **Access the Application:**
   You can now access Platforma at:
   http://{{ .Values.ingress.host }}
{{- else if contains "NodePort" .Values.service.type }}
1. **Get the Node IP and Port:**
   ```sh
   export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "platforma.fullname" . }})
   export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
   ```

2. **Access the Application:**
   http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
1. **Get the LoadBalancer IP:**
   It may take a few minutes for the LoadBalancer IP to be available. Watch the status by running:
   ```sh
   kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "platforma.fullname" . }}
   ```
   Once available, get the IP with:
   ```sh
   export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "platforma.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
   ```

2. **Access the Application:**
   http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
1. **Use Port Forwarding:**
   The service is only accessible within the cluster. You can access it using `port-forward`:
   ```sh
   export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "platforma.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
   kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:{{ .Values.listenOptions.port }}
   ```

2. **Access the Application:**
   Visit http://127.0.0.1:8080 in your browser.
{{- end }}

{{- if .Values.primaryStorage.fs.enabled }}

Filesystem primary storage is enabled.

1. Verify the PVC backing the FS storage:
   ```sh
   export FS_PVC={{ ( .Values.primaryStorage.fs.persistence.existingClaim | default (printf "%s-primary-storage" (include "platforma.fullname" .)) ) }}
   kubectl get pvc $FS_PVC -o wide
   ```

2. Discover the FS HTTP endpoint:
   {{- if and .Values.ingress.enabled .Values.ingress.paths.http.enabled }}
   - Via Ingress: http{{ if .Values.ingress.tls.enabled }}s{{ end }}://{{ .Values.ingress.host }}{{ .Values.ingress.paths.http.path }}
   {{- else if eq .Values.primaryStorage.fs.httpService.type "LoadBalancer" }}
   - Via LoadBalancer Service:
     ```sh
     export FS_SERVICE={{ include "platforma.fullname" . }}-http
     export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} $FS_SERVICE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
     echo http://$SERVICE_IP:{{ .Values.listenOptions.httpPort }}
     ```
   {{- else if eq .Values.primaryStorage.fs.httpService.type "NodePort" }}
   - Via NodePort Service:
     ```sh
     export FS_SERVICE={{ include "platforma.fullname" . }}-http
     export NODE_PORT=$(kubectl get svc --namespace {{ .Release.Namespace }} $FS_SERVICE -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}')
     export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath='{.items[0].status.addresses[0].address}')
     echo http://$NODE_IP:$NODE_PORT
     ```
   {{- else }}
   - Via ClusterIP Service (port-forward):
     ```sh
     export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "platforma.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath='{.items[0].metadata.name}')
     kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:{{ .Values.listenOptions.httpPort }}
     echo http://127.0.0.1:8080
     ```
   {{- end }}

3. Note:
   - The FS endpoint is exposed by the Service `{{ include "platforma.fullname" . }}-http` on port {{ .Values.listenOptions.httpPort }}.
   - The application will use this endpoint automatically when `primaryStorage.fs.autoUrl` is true; otherwise it uses the URL you configured at `primaryStorage.fs.url`.

{{- end }}

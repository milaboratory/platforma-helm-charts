# Default values for generic-application.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#
nameOverride: ""
fullnameOverride: ""
#
rbac:
  create: true
  annotations: {}
  extraLabels: {}
serviceAccount:
  # -- Create service account.
  create: true
  # name:
  extraLabels: {}
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  automountServiceAccountToken: true
app:
  enabled: true
  # -- Server container name
  name: app
  image:
    # -- Image repository
    repository: quay.io/milaboratories/platforma
    # -- Tag to override with, will default to the application version
    # tag: ""
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Override command for the container
    command: ""
    # -- Argument list for the command
    args: []
  # -- Deployment additional labels
  extraLabels: {}
  #-- Deployment annotations
  annotations: {}
  # -- Name of Priority Class
  priorityClassName: ""
  #  Use an alternate scheduler, e.g. "stork".
  #  ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  schedulerName: ""
  # -- Only Pod's additional labels
  podLabels: {}
  # -- Only Pod's annotations
  podAnnotations: {}
  #  prometheus.io/scrape: "false"
  #  prometheus.io/port: "9090"
  #  prometheus.io/scheme: "http"
  # -- Pod's management policy
  podManagementPolicy: OrderedReady
  # Deployment strategy ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy:
    #rollingUpdate:
    #  maxSurge: 1
    #  maxUnavailable: 0
    #type: RollingUpdate
    type: Recreate
  # -- Depoyment's (continer level) security context
  securityContext:
    runAsUser: 0
    runAsGroup: 0
    runAsNonRoot: false
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
  # -- Pod's security context.
  # ref: [https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)
  podSecurityContext:
    fsGroup: 3000
  # -- Prometheus metrics settings
  metrics:
    # If you enable Prometheus metrics for an application,
    # add proper annotations; see podAnnotations for an example.
    # You need to add them manually as a compatible layer with istio metrics.
    # Add another reason that we have auto scraping enabled based on Prometheus annotations.
    enabled: false
    targetPort: 9090
    portName: metrics-server
  # Number of old ReplicaSets to retain
  #
  replicaCount: 1
  horizontalPodAutoscaler:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    metrics: []
  #
  containerWorkingDir: "/app"
  # -- See `kubectl explain poddisruptionbudget.spec` for more.
  # ref: [https://kubernetes.io/docs/tasks/run-application/configure-pdb/](https://kubernetes.io/docs/tasks/run-application/configure-pdb/)
  podDisruptionBudget:
    enabled: false
    #minAvailable: 1
    #maxUnavailable: 1
    extraLabels: {}
  # -- Deployment init containers
  initContainers: []
  # Inject Kubernetes services as environment variables.
  # See https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/#environment-variables
  enableServiceLinks: true
  # -- Image pull secrets.
  # ref. https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []
  # -- Node tolerations for server scheduling to nodes with taints.
  # ref: [https://kubernetes.io/docs/concepts/configuration/assign-pod-node/](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/)
  tolerations: []
  # -- Pod's node selector.
  # ref: [https://kubernetes.io/docs/user-guide/node-selection/](https://kubernetes.io/docs/user-guide/node-selection/)
  nodeSelector: {}
  # -- Pod affinity
  affinity: {}
  # -- Topology Spread Constraints ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  topologySpreadConstraints: []
  # -- Env variables
  # -- Additional environment variables (ex.: secret tokens, flags)
  env: {}
  envValueFrom: {}
  # -- External secrets. (AWS Secrets Manager)
  externalSecret:
    enabled: false
    awsRegion: eu-central-1
    # -- ExternalSecret annotations
    annotations: {}
    # -- ExternalSecret extraLabels
    extraLabels: {}
    # -- SecretsStore target
    secretRefreshInterval: 24h
    secretStoreTarget: general-application-secrets
    secretDataFrom: {}
  # -- volumeMounts
  volumeMounts: []
  # example:
  #  - mountPath: /cache
  #    name: cache-volume
  # --  volumes
  volumes: []
  # example: persistent volume
  #  - name: cache-volume
  #    persistentVolumeClaim:
  #      claimName: release-name-generic-application
  # example: inmemory
  #  - name: cache-volume
  #    emptyDir:
  #      medium: Memory
  #      sizeLimit: 2Gi
  structuredConfig: {}
  config: |
    logging:
      level: "info"

    debug:
      listen: "0.0.0.0:9091"
    grpcServer:
      listen: "0.0.0.0:6345"
    monitoring:
      listen: "0.0.0.0:9090"
    license:
      value: "env:PL_LICENSE"

    core:
      logging:
        extendedInfo: true
        apiLevel: "info"
        dbLevel: "info"

      authEnabled: true
      auth:
      {{- if eq .Values.app.coreConfig.auth.type "htpasswd" }}
        - driver: htpasswd
          path: /etc/platforma/users.htpasswd
      {{- else if eq .Values.app.coreConfig.auth.type "ldap" }}
        - driver: ldap
          serverUrl: "ldap://ldap.chart-exmaple.local:3894"
          defaultDN: "cn=%u,ou=users,ou=users,dc=chart-example,dc=local"
      {{- end }}
        - driver: jwt
          key: "be2e30ed04e9e520e5eb0718a471bb6c3c548825e7822fdc3b901691ad27fc77"

      db:
        path: {{ .Values.app.persistentVolume.database.mountPath | quote }}

    controllers:
      common:
        timeouts:
          request: 10s
          init: 1m
          stop: 30s

      file:
        main:
          storages:
            primary:
              mode: primary
              downloadable: true

            work:
              mode: active
              downloadable: false

            raw:
              mode: passive
              downloadable: false

            test-assets:
              mode: passive

          workdirManager: work
          uploadManager: primary
          defaultDownloadable: primary

          transfers:
            - ["primary", "work"]
            - ["work", "primary"]

            - ["raw", "work"]
            - ["test-assets", "work"]

        storages:
          - &primaryStorage
            id: "primary"
            type: S3
            region: "eu-central-1"
            bucketName: "example-s3-bucket-name"
            keyPrefix: "platforma-primary/"

          - &rawStorage
            id: "raw"
            type: S3
            region: "eu-central-1"
            bucketName: "example-s3-bucket-name"
            keyPrefix: "corp-library/"

          - &testAssetsStorage
            id: "test-assets"
            type: S3
            region: "eu-central-1"
            bucketName: "example-s3-bucket-name"
            keyPrefix: "test-assets/"

          - &workStorage
            id: "work"
            type: FS
            indexCachePeriod: "1m"
            rootPath: {{ .Values.app.persistentVolume.work.mountPath | quote }}

        transfers:
          - src: *primaryStorage
            dst: *workStorage

          - src: *workStorage
            dst: *primaryStorage

          - src: *rawStorage
            dst: *workStorage

          - src: *testAssetsStorage
            dst: *workStorage

      runner:
        type: local
        storageRoot: {{ .Values.app.persistentVolume.work.mountPath | quote }}

      packageLoader:
        packagesRoot: {{ .Values.app.persistentVolume.softwareloader.mountPath | quote }}
        registries:
        - name: "milaboratories"
          endpoints:
            - type: "local"
              path: {{ .Values.app.persistentVolume.softwareloader.mountPath | quote }}
            - type: "url"
              url: "https://bin.registry.platforma.bio/"

      workflows:
        features:
          computeLimits: true
  coreConfig:
    auth:
      enabled: true
      type: ldap
  htpasswdConfig: {}
  # -- Persistent volume:
  persistentVolume:
    # -- Create/use Persistent Volume Claim for server component. Empty dir if false
    # -- If you change mountPath values here, don't forget to update platforma.yaml with the new values.
    database:
      enabled: true
      type: "pvc"
      # -- Mount path
      mountPath: "/db"
      # -- Array of access modes. Must match those of existing PV or dynamic provisioner.
      # ref: [http://kubernetes.io/docs/user-guide/persistent-volumes/](http://kubernetes.io/docs/user-guide/persistent-volumes/)
      accessModes:
        - ReadWriteOnce
      # -- Persistant volume annotations
      annotations: {}
      # -- Persistant volume extraLabels
      extraLabels: {}
      # -- persistentVolumeReclaimPolicy. The reclaim policy for a PersistentVolume tells the cluster what to do with the volume after it has been released of its claim.
      reclaimPolicy: ""
      # -- StorageClass to use for persistent volume. Requires server.persistentVolume.enabled: true. If defined, PVC created automatically
      storageClass: local-path
      # -- Existing Claim name. If defined, PVC must be created manually before volume will be bound
      existingClaim: ""
      # -- Bind Persistent Volume by labels. Must match all labels of targeted PV.
      matchLabels: {}
      # -- Mount path. Server data Persistent Volume mount root path.
      size: 20Gi
    work:
      enabled: true
      type: "pvc"
      # -- Mount path
      mountPath: "/data/work"
      # -- Array of access modes. Must match those of existing PV or dynamic provisioner.
      # ref: [http://kubernetes.io/docs/user-guide/persistent-volumes/](http://kubernetes.io/docs/user-guide/persistent-volumes/)
      accessModes:
        - ReadWriteOnce
      # -- Persistant volume annotations
      annotations: {}
      # -- Persistant volume extraLabels
      extraLabels: {}
      # -- persistentVolumeReclaimPolicy. The reclaim policy for a PersistentVolume tells the cluster what to do with the volume after it has been released of its claim.
      reclaimPolicy: ""
      # -- StorageClass to use for persistent volume. Requires server.persistentVolume.enabled: true. If defined, PVC created automatically
      storageClass: local-path
      # -- Existing Claim name. If defined, PVC must be created manually before volume will be bound
      existingClaim: ""
      # -- Bind Persistent Volume by labels. Must match all labels of targeted PV.
      matchLabels: {}
      # -- Mount path. Server data Persistent Volume mount root path.
      size: 400Gi
    softwareloader:
      enabled: true
      type: "pvc"
      # -- Mount path
      mountPath: "/storage/controllers/software-loader"
      # -- Array of access modes. Must match those of existing PV or dynamic provisioner.
      # ref: [http://kubernetes.io/docs/user-guide/persistent-volumes/](http://kubernetes.io/docs/user-guide/persistent-volumes/)
      accessModes:
        - ReadWriteOnce
      # -- Persistant volume annotations
      annotations: {}
      # -- Persistant volume extraLabels
      extraLabels: {}
      # -- persistentVolumeReclaimPolicy. The reclaim policy for a PersistentVolume tells the cluster what to do with the volume after it has been released of its claim.
      reclaimPolicy: ""
      # -- StorageClass to use for persistent volume. Requires server.persistentVolume.enabled: true. If defined, PVC created automatically
      storageClass: local-path
      # -- Existing Claim name. If defined, PVC must be created manually before volume will be bound
      existingClaim: ""
      # -- Bind Persistent Volume by labels. Must match all labels of targeted PV.
      matchLabels: {}
      # -- Mount path. Server data Persistent Volume mount root path.
      size: 150Gi
  # -- Resource object.
  # ref: [http://kubernetes.io/docs/user-guide/compute-resources/](http://kubernetes.io/docs/user-guide/compute-resources/
  resources: {}
  # Indicates whether the Container is ready to service requests. If the readiness probe fails, the endpoints controller removes the Pod's IP address from the endpoints of all Services that match the Pod. The default state of readiness before the initial delay is Failure. If a Container does not provide a readiness probe, the default state is Success.
  readinessProbe:
    grpc:
      port: 6345
    initialDelaySeconds: 15
    periodSeconds: 15
    timeoutSeconds: 5
    failureThreshold: 3
  # Indicates whether the Container is running. If the liveness probe fails, the kubelet kills the Container, and the Container is subjected to its restart policy. If a Container does not provide a liveness probe, the default state is Success.
  livenessProbe:
    grpc:
      port: 6345
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 10
  # Indicates whether the Container is done with potentially costly initialization. If set it is executed first. If it fails Container is restarted. If it succeeds liveness and readiness probes takes over.
  startupProbe: {}
  #startupProbe:
  #  tcpSocket:
  #    port: http
  #  failureThreshold: 30
  #  periodSeconds: 15
  #  successThreshold: 1
  #  timeoutSeconds: 5
  #
  ingress:
    # -- Enable deployment of ingress for server component
    enabled: false
    # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
    # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
    # ingressClassName: nginx
    ingressClassName: traefik
    # -- Ingress annotations
    annotations: {}
    # -- Ingress extra labels
    extraLabels: {}
    # -- Array of host objects
    path: /
    hosts:
      - pl.chart-example.local
    pathType: Prefix
    # Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
    extraPaths: []
    # -- Array of TLS objects
    #tls: []
    #  - secretName: chart-example-tls
    #     hosts:
    #       - chart-example.local
  service:
    # -- Service annotations
    annotations:
      traefik.ingress.kubernetes.io/service.serversscheme: h2c
    # -- Service labels
    extraLabels: {}
    # -- Service ClusterIP
    clusterIP: ""
    # -- Service External IPs. ref: [https://kubernetes.io/docs/user-guide/services/#external-ips]( https://kubernetes.io/docs/user-guide/services/#external-ips)
    externalIPs: []
    # -- Service load balacner IP
    loadBalancerIP: ""
    # -- Load balancer source range
    loadBalancerSourceRanges: []
    # -- Service port
    port: 6345
    # -- Container port name
    portName: plgrpc
    # -- Container port
    targetPort: 6345
    # -- Node port
    # nodePort: 30000
    # -- Service type
    type: ClusterIP
    # Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    # externalTrafficPolicy: "local"
    # healthCheckNodePort: 0

    # Container Lifecycle Hooks. Execute a specific bash command or make an HTTP request
    lifecycleHooks: {}
    # postStart:
    #   exec:
    #     command: []
  debug:
    ingress:
      # -- Enable deployment of ingress for debug component of the server
      enabled: false
      # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
      # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
      # ingressClassName: nginx
      ingressClassName: traefik
      # -- Ingress annotations
      annotations: {}
      # -- Ingress extra labels
      extraLabels: {}
      # -- Array of host objects
      path: /
      hosts:
        - pl-debug.chart-example.local
      pathType: Prefix
      # Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
      extraPaths: []
      # -- Array of TLS objects
      #tls: []
      #  - secretName: chart-example-tls
      #     hosts:
      #       - chart-example.local
    service:
      # -- Service annotations
      annotations: {}
      # -- Service labels
      extraLabels: {}
      # -- Service ClusterIP
      clusterIP: ""
      # -- Service External IPs. ref: [https://kubernetes.io/docs/user-guide/services/#external-ips]( https://kubernetes.io/docs/user-guide/services/#external-ips)
      externalIPs: []
      # -- Service load balacner IP
      loadBalancerIP: ""
      # -- Load balancer source range
      loadBalancerSourceRanges: []
      # -- Service port
      port: 9091
      # -- Container port name
      portName: pldebug
      # -- Container port
      targetPort: 9091
      # -- Node port
      # nodePort: 30000
      # -- Service type
      type: ClusterIP
      # Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      # externalTrafficPolicy: "local"
      # healthCheckNodePort: 0
  # -- Pod's termination grace period in seconds
  terminationGracePeriodSeconds: 30
  # Overrides pod.spec.hostAliases in the generic-application deployment's pods
  hostAliases: []
  # - ip: "1.2.3.4"
  #   hostnames:
  #     - "my.host.com"

  # Enable direct access to the network interfaces of the host machine where the pod was started
  hostNetwork: false
  # dnsPolicy and dnsConfig for Deployments if you want non-default settings.
  # These will be passed directly to the PodSpec of same.
  dnsPolicy: ""
  dnsConfig: ""
